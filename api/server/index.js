// Import polyfills for fetch required by msgraph-sdk-javascript.
require("isomorphic-fetch");
const teamsfxSdk = require("@microsoft/teamsfx");
const fetch = require("node-fetch"); // to install, use npm install node-fetch@2
const { Connection, Request } = require('tedious');

const config = require("../config");

/**
* @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} { [key: string]: any; } - The context generated by teamsfx binding.
 */
module.exports = async function (context, req, teamsfxContext) {
  context.log("HTTP trigger function processed a request.");
  let route = context.bindingData.route; // Get api route name
  let method = req.method.toLowerCase();

  try {
    // Prepare id token (also auth or sso token).
    const ssoToken = teamsfxContext["AccessToken"];
    if (!ssoToken) {
      return {
        status: 400,
        body: {
          error: "No access token was found in request header.",
        },
      };
    }
    // get access token through on-behalf-of flow
    let accessToken = await getAccessToken(ssoToken);
    // routing
    let response;
    if (method === "get") {
      switch (route) {
        case "consent":
          response = { data: true };
          break;
        case "user":
          response = await getSignedInUserData(accessToken);
          break;
        case "users":
          response = await getAllUsers(accessToken);
          break;
        case "analytics":
          response = await getAnalyticsData(accessToken, req);
          break;
      }
    }
    // return a response object to the client
    return {
      status: response.status || 200,
      body: response.data,
    };
  } catch (error) {
    return {
      status: error.status || 500,
      body: {
        error: error.message || "Unable to execute request"
      }
    }
  }
};

// function to exchange sso token for access token on-behalf-of the user from Azure AD
async function getAccessToken(ssoToken) {
  try {
    const tokenEndpoint = `https://login.microsoftonline.com/${config.tenantId}/oauth2/v2.0/token`;

    let Headers = new fetch.Headers();
    Headers.append('Content-Type', 'application/x-www-form-urlencoded');

    let urlencoded = new URLSearchParams();
    urlencoded.append('grant_type', 'urn:ietf:params:oauth:grant-type:jwt-bearer');
    urlencoded.append('client_id', config.clientId);
    urlencoded.append('client_secret', config.clientSecret);
    urlencoded.append('assertion', ssoToken);
    urlencoded.append('scope', "User.Read User.ReadBasic.All User.Read.All Reports.Read.All");
    urlencoded.append('requested_token_use', 'on_behalf_of');

    let options = {
      method: 'POST',
      headers: Headers,
      body: urlencoded
    };

    let response = await fetch(tokenEndpoint, options);
    if (response.ok) {
      let tokenData = await response.json();
      return tokenData.access_token;
    } else {
      let responseText = await response.text();
      if (JSON.parse(responseText).error === "invalid_grant") {
        throw { status: 401, message: "invalid_grant: You or an administrator needs to consent to required permission(s)." };
      } else {
        throw { status: 400, message: "Unable to get access token." };
      }
    }
  } catch (err) {
    throw { status: err.status || 500, message: (err.status && err.status < 500) ? err.message : "Unable to get access token." };
  }
}

// function to get signed in user's Microsoft 365 data
async function getSignedInUserData(accessToken) {
  let userEndpoint = "https://graph.microsoft.com/v1.0/me"
  let userOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8',
      'ConsistencyLevel': 'eventual'
    },
  };

  try {
    let response = await fetch(userEndpoint, userOptions);
    if (response.ok) {
      let userData = await response.json();
      return {
        status: 200,
        data: userData
      };
    } else {
      throw { status: 500, message: "Unable to get user's Microsoft 365 data." };
    }
  } catch (err) {
    throw { status: 500, message: "Unable to get user's Microsoft 365 data." };
  }
}

// function to get all users
async function getAllUsers(accessToken) {
  let allUsersEndpoint = "https://graph.microsoft.com/v1.0/users?$top=999&$filter=(onPremisesSyncEnabled eq true OR userType eq 'Member') and accountEnabled eq true&$select=id,mail,displayName,jobTitle,department,userPrincipalName"
  let allUsersOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8'
    },
  };
  try {
    let response = await fetch(allUsersEndpoint, allUsersOptions);
    if (response.ok) {
      let allUsers = await response.json();
      allUsers = allUsers?.value?.sort((a, b) => (a.displayName > b.displayName) ? 1 : ((b.displayName > a.displayName) ? -1 : 0));
      return {
        status: 200,
        data: allUsers
      };
    } else {
      throw { status: 500, message: "Failed to retrieve list of users." };
    }
  } catch (err) {
    throw { status: 500, message: "Failed to retrieve list of users." };
  }
}

async function getAnalyticsData(accessToken, req) {
  try {
    let analyticsData = {};
    let userUpn = req.query?.userUpn;
    let isEmailRegExp = new RegExp(/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/);
    let data = await Promise.all([
      getAnalyticsDataForTeams(accessToken, userUpn),
      getAnalyticsDataForEmails(accessToken, userUpn),
      getAnalyticsDataForSharepoint(accessToken, userUpn)
    ]);
    if (isEmailRegExp.test(userUpn)) {
      data.forEach((analytic, index) => {
        analytic = analytic.find((user) => user["User Principal Name"] === userUpn);
        switch (index) {
          case 0:
            analyticsData.teams = analytic;
            break;
          case 1:
            analyticsData.outlook = analytic;
            break;
          case 2:
            analyticsData.sharepoint = analytic;
            break;
        }
      })
    } else if (userUpn === "All") {
      analyticsData.teams = data[0];
      analyticsData.outlook = data[1];
      analyticsData.sharepoint = data[2];
    }

    return {
      status: 200,
      data: analyticsData
    };
  } catch (err) {
    throw { status: 500, message: "Failed to retrieve analytics data." };
  }
}

async function getAnalyticsDataForTeams(accessToken, duration) {
  // let duration = 'D180'
  let teamsEndpoint = `https://graph.microsoft.com/v1.0/reports/getTeamsUserActivityUserDetail(period='${duration}')`;
  let teamsOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8'
    },
  };

  try {
    let response = await fetch(teamsEndpoint, teamsOptions);
    if (response.ok) {
      let teamsData = await response.text();
      teamsData = convertCSVToArray(teamsData);
      return teamsData;
    } else {
      throw { status: 500, message: "Failed to retrieve Microsoft Teams analytics data." };
    }
  } catch (err) {
    throw { status: 500, message: "Failed to retrieve Microsoft Teams analytics data." };
  }
}

async function getAnalyticsDataForEmails(accessToken,duration) {
  // let duration = 'D180'
  let outlookEndpoint = `https://graph.microsoft.com/v1.0/reports/getEmailActivityUserDetail(period='${duration}')`;
  let outlookOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8'
    },
  };

  try {
    let response = await fetch(outlookEndpoint, outlookOptions);
    if (response.ok) {
      let outlookData = await response.text();
      outlookData = convertCSVToArray(outlookData);
      return outlookData;
    } else {
      throw { status: 500, message: "Failed to retrieve Outlook analytics data." };
    }
  } catch (err) {
    throw { status: 500, message: "Failed to retrieve Outlook analytics data." };
  }
}

async function getAnalyticsDataForSharepoint(accessToken,duration) {
  // let duration = 'D180'
  let sharepointEndpoint = `https://graph.microsoft.com/v1.0/reports/getSharePointActivityUserDetail(period='${duration}')`;
  let sharepointOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8'
    },
  };

  try {
    let response = await fetch(sharepointEndpoint, sharepointOptions);
    if (response.ok) {
      let sharepointData = await response.text();
      sharepointData = convertCSVToArray(sharepointData);
      return sharepointData;
    } else {
      throw { status: 500, message: "Failed to retrieve Sharepoint analytics data." };
    }
  } catch (err) {
    throw { status: 500, message: "Failed to retrieve Sharepoint analytics data." };
  }
}

function convertCSVToArray(csvData) {
  try {
    // retrieve the csv header as an array
    let header = csvData.slice(0, csvData.indexOf('\n')).trim().split(',')

    // retrieve the body of the csv into one array with each item being a row in the csv
    let body = csvData.slice(csvData.indexOf('\n') + 1).split('\n');

    // merge the header and each row in the body to be an array of objects
    const parsedData = body.map(function (row) {
      // split the row string into items in one array
      // that is, ['2023-03-01', '00118923-2cf6-40eb-b6e6-574c11285e25', ...]
      const values = row.trim().split(",");

      // merge row (values) and header into an object
      // that is, { 'Report Refresh Date': '2023-03-01', 'User Id': '00118923-2cf6-40eb-b6e6-574c11285e25', ...}
      const storeKeyValue = header.reduce(
        function (obj, title, index) {
          obj[title] = values[index];
          return obj;
        }, {});

      return storeKeyValue;
    });

    return parsedData;
  } catch (err) {
    throw err;
  }
}

// async function getAnalyticsDataForSharepointsites(accessToken, queryParams) {
//   let userEndpoint = ` https://graph.microsoft.com/v1.0/reports/getSharePointSiteUsageDetail(period='D7')`;
//   let userOptions = {
//     method: 'GET',
//     headers: {
//       'Authorization': `Bearer ${accessToken}`,
//       'Content-type': 'application/json',
//       'Accept': 'application/json',
//       'Accept-Charset': 'utf-8'
//     },
//   };

//   try {
//     let response = await fetch(userEndpoint, userOptions);
//     if (response.ok) {
//       let teamsData = await response.text();
//       teamsData = convertCSVToArray(teamsData);
//       console.log("..................", teamsData);
//       return teamsData;
//     } else {
//       throw { status: 500, message: "Unable to get user's Microsoft 365 data." };
//     }
//   } catch (err) {
//     throw { status: 500, message: "Unable to get user's Microsoft 365 data." };
//   }
// }